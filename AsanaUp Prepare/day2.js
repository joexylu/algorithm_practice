//mutateTheArray
function mutateTheArray(n, a){

}


//alternatingSort
// You are given an array of integers a. A new array b is generated by rearranging the elements of a in the following way:

// b[0] is equal to a[0];
// b[1] is equal to the last element of a;
// b[2] is equal to a[1];
// b[3] is equal to the second-last element of a;
// and so on.
// Your task is to determine whether the new array b is sorted in strictly ascending order or not.

// Example

// For a = [1, 3, 5, 6, 4, 2], the output should be alternatingSort(a) = true.

// The new array b will look like [1, 2, 3, 4, 5, 6], which is in strictly ascending order, so the answer is true.

// For a = [1, 4, 5, 6, 3], the output should be alternatingSort(a) = false.

// The new array b will look like [1, 3, 4, 6, 5], which is not in strictly ascending order, so the answer is false.



function alternatingSort(a) {
    let len = a.length;
    let b = []
    for(let i = 0; i < len; i++){
        if(i%2 === 0){
            b.push(a.shift())
            
        }else{
            b.push(a.pop())
            
        }
    }
    return b
}

//MeanGroup
// You are given an array of arrays a. Your task is to group the arrays a[i] by their mean values, so that arrays with equal mean values are in the same group, and arrays with different mean values are in different groups.

// Each group should contain a set of indices (i, j, etc), such that the corresponding arrays (a[i], a[j], etc) all have the same mean. Return the set of groups as an array of arrays, where the indices within each group are sorted in ascending order, and the groups are sorted in ascending order of their minimum element.

// Example

// For

// a = [[3, 3, 4, 2],
//      [4, 4],
//      [4, 0, 3, 3],
//      [2, 3],
//      [3, 3, 3]]
// the output should be

// meanGroups(a) = [[0, 4],
//                  [1],
//                  [2, 3]]
// mean(a[0]) = (3 + 3 + 4 + 2) / 4 = 3;
// mean(a[1]) = (4 + 4) / 2 = 4;
// mean(a[2]) = (4 + 0 + 3 + 3) / 4 = 2.5;
// mean(a[3]) = (2 + 3) / 2 = 2.5;
// mean(a[4]) = (3 + 3 + 3) / 3 = 3.
// There are three groups of means: those with mean 2.5, 3, and 4. And they form the following groups:

// Arrays with indices 0 and 4 form a group with mean 3;
// Array with index 1 forms a group with mean 4;
// Arrays with indices 2 and 3 form a group with mean 2.5.
// Note that neither

// meanGroups(a) = [[0, 4],
//                  [2, 3],
//                  [1]]
// nor

// meanGroups(a) = [[0, 4],
//                  [1],
//                  [3, 2]]
// will be considered as a correct answer:

// In the first case, the minimal element in the array at index 2 is 1, and it is less then the minimal element in the array at index 1, which is 2.
// In the second case, the array at index 2 is not sorted in ascending order.
// For

// a = [[-5, 2, 3],
//      [0, 0],
//      [0],
//      [-100, 100]]
// the output should be

// meanGroups(a) = [[0, 1, 2, 3]]
// The mean values of all of the arrays are 0, so all of them are in the same group.

function findMean(array){
    let sum = 0;
    for(let i = 0; i< array.length; i++){
        sum += array[i]
    }
    
    return sum/array.length
}

function meanGroups(a) {
    let heap = {};
    let av;
    for (let i = 0; i < a.length; i++){
        av = findMean(a[i]);
        
        if(heap[av]){
            heap[av].push(i)
        }else{
            heap[av] = [i]
        }
    }
    
    return Object.values(heap)
}
// need to sorted the result sorted 2d 



//concatenations SUm
// Given an array of positive integers a, your task is to calculate the sum of every possible a[i] ∘ a[j], where a[i] ∘ a[j] is the concatenation of the string representations of a[i] and a[j] respectively.

// Example

// For a = [10, 2], the output should be concatenationsSum(a) = 1344.

// a[0] ∘ a[0] = 10 ∘ 10 = 1010,
// a[0] ∘ a[1] = 10 ∘ 2 = 102,
// a[1] ∘ a[0] = 2 ∘ 10 = 210,
// a[1] ∘ a[1] = 2 ∘ 2 = 22.
// So the sum is equal to 1010 + 102 + 210 + 22 = 1344.

// For a = [8], the output should be concatenationsSum(a) = 88.

// There is only one number in a, and a[0] ∘ a[0] = 8 ∘ 8 = 88, so the answer is 88.


function concatenationsSum(a) {
    let sum =0;
    for(let i = 0; i< a.length; i++){
        for(let j = 0; j< a.length; j++){
            sum += parseInt(a[i].toString()+a[j].toString());
        }
    }
    
    return sum
}